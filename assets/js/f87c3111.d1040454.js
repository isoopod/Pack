"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[782],{5027:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Datatypes/Miscellaneous","title":"Miscellaneous Datatypes","description":"These datatypes do not fit into the category of primitive or structural.","source":"@site/docs/Datatypes/Miscellaneous.md","sourceDirName":"Datatypes","slug":"/Datatypes/Miscellaneous","permalink":"/Pack/docs/Datatypes/Miscellaneous","draft":false,"unlisted":false,"editUrl":"https://github.com/isoopod/Pack/edit/master/docs/Datatypes/Miscellaneous.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Structural Datatypes","permalink":"/Pack/docs/Datatypes/Structures"},"next":{"title":"Configuration","permalink":"/Pack/docs/Configuration"}}');var r=t(74848),o=t(28453);const s={sidebar_position:3},c="Miscellaneous Datatypes",i={},d=[{value:"Custom",id:"custom",level:2},{value:"Transformer",id:"transformer",level:2}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"miscellaneous-datatypes",children:"Miscellaneous Datatypes"})}),"\n",(0,r.jsx)(n.p,{children:"These datatypes do not fit into the category of primitive or structural."}),"\n",(0,r.jsx)(n.h2,{id:"custom",children:"Custom"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"Pack.Custom(reader: (reader) -> T, writer: (writer, val: T))\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Custom"})," datatype is used as a simple way to create a custom datatype that will be used once.",(0,r.jsx)(n.br,{}),"\n","If performance is essential or the datatype needs to be reused, you can create an extension datatype using the exposed internal Pack types."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- See the API reference for the Reader and Writer libraries.\n-- In this example, the datatype just represents a float64\nPack:DefineSchema(\n    Pack.Custom(\n        function(reader)\n            return Pack.Reader.f64(reader)\n        end,\n        function(writer, val: number)\n            Pack.Writer.alloc(writer, 4)\n            Pack.Writer.f64(writer, val)\n        end\n    )\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"transformer",children:"Transformer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"Pack.Transformer(format: T, encode: ((input: U) -> T)?, decode: ((input: T) -> U)?)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Transformer"})," datatype functions as a convenient wrapper for transforming raw data into a more efficient format for encoding, and reversing that process.\nThe ",(0,r.jsx)(n.code,{children:"format"})," (usually a ",(0,r.jsx)(n.a,{href:"Structures#dictionary",children:"Dictionary"}),") is how the data will be encoded by Pack.\nThe ",(0,r.jsx)(n.code,{children:"encode"})," function should take some data not that would not directly be accepted by ",(0,r.jsx)(n.code,{children:"format"})," and transform it such that it can be.\nThe ",(0,r.jsx)(n.code,{children:"decode"})," function would then bring data encoded in that ",(0,r.jsx)(n.code,{children:"format"})," and turn it back into the original format"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"encode"})," and ",(0,r.jsx)(n.code,{children:"decode"})," are both optional, allowing you to use the transformer for data normalization, such as filling in defaults."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'type standard = {\n    color: string -- Hex string\n    enabled: "True" | "False"\n}\n\nPack:DefineSchema(\n    Pack.Transformer(\n        Pack.Dicitonary({\n            color = Pack.Color3,\n            enabled = Pack.Boolean,\n        }),\n        function(input: standard)\n            local result = {}\n            result.color = Color3.FromHex(input.color)\n            result.enabled = input.enabled == "True"\n            \n            return result\n        end,\n        function(input) -- The type should be inferred as the same type as the dictionary\n            local result = {}\n            result.color = input.color:ToHex()\n            result.enabled = input.enabled and "True" or "False\n    \n            return result\n        end\n    )\n)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(96540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);