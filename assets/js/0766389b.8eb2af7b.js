"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[880],{7373:e=>{e.exports=JSON.parse('{"functions":[{"name":"Define","desc":"Defines a Schema from the provided datatypes.  \\nThis supports tuples, however due to luau limitations you will need to manually annotate the type.\\n\\n```lua title=\\"tupleExample.luau\\"\\nlocal Pack = require(path.to.pack)\\n\\n-- The type of this schema will implicitly be infered as CFrame\\nlocal exampleSchema = Pack:Define(Pack.CFrame)\\n\\n-- For tuples, you must explicitly annotate the type of the schema using Pack.Schema<...>. \\n-- The luau type solver can only infer the first argument.\\nlocal tupleSchema = Pack:Define(Pack.CFrame, Pack.Vector3) :: Pack.Schema<CFrame, Vector3>\\n```","params":[{"name":"...","desc":"See all datatypes in Docs/Datatypes","lua_type":"Datatype"}],"returns":[{"desc":"","lua_type":"Schema"}],"function_type":"method","source":{"line":117,"path":"src/init.luau"}}],"properties":[],"types":[],"name":"Pack","desc":"The singleton object from where Schemas are created and Datatypes can be accessed.\\n\\nThe constructor for Schemas is accessed with : syntax  \\nDatatypes are accessed with . syntax  \\nAll default datatypes can be found in [Docs/Datatypes](../docs/Datatypes/Primitives)","source":{"line":96,"path":"src/init.luau"}}')}}]);